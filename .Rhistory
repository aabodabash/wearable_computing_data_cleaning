install.packages('slidify')
install.packages("slidify")
install.packages("slidify")
ap <- available.packages()
installed.packages()
install.packages("Rstem")
install.packages("Slidify")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GenomicFeatuers","AnnotationDbi"))
library()
library(ggplot2)
install.packages("ggplot2")
getwd()
swirl()
library(swirl)
swirl()
swirl()
library(tidyr)
students
?gather
gater(students, sex,count,-grade)
gather(students, sex,count,-grade)
students2
res <- gather(students2,name,sex_class,value)
res <- gather(students2,name,sex_class,count)
ref
res <- 1
gather(students2, sex_class, count, -grade))
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res]
res
?separate
separate(res, sex_class,c("sex","class"))
submit()
students3
submit()
gather(students3, name ,test ,class= class1:class5 ,na.rm = TRUE)
gather(students3, name ,test ,-class= class1:class5 ,na.rm = TRUE)
gather(students3, name ,test ,class= -(class1:class5) ,na.rm = TRUE)
submit()
submit()
reset()
submit()
gather(students3, name,test ,class=class1:class2 ,na.rm = TRUE)
gather(students3, -name,test ,class=class1:class2 ,na.rm = TRUE)
gather(students3, - name,test ,class=class1:class2 ,na.rm = TRUE)
gather(students3, name,test , -(class=class1:class2) ,na.rm = TRUE)
submit()
submit()
submit()
submit()
?spread
submit()
submit()
extract_numeric(class5)
extract_numeric("class5")
submit()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric("class"))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
submit()
submit()
students4
submit()
submit()
install.packages(c ("XLConnect " , " zoo " , " ggplot2 "))
install.packages(c("XLConnect" , "zoo" , "ggplot2"))
install.packages(c("googleVis","htmlwidgets","rgl","ggvis","parallel","shiny","RODBC", "RMySQL", "RPostgresSQL", "RSQLite" ))
install.packages(c("googleVis", "htmlwidgets", "rgl", "ggvis",
)
)
install.packages(c("googleVis","htmlwidgets","rgl","ggvis","parallel","shiny"))
install.packages(c("RODBC", "RMySQL", "RPostgresSQL", "RSQLite" ))
install.packages(DT)
install.packages("DT")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("rHighcharts", "metagraf")
install_github("rHighcharts", " metagraf/rHighcharts")
install_github("rHighcharts", "metagraf/rHighcharts")
students3
student_info
plot(strudent)
plot(student_info)
plot(student_info)
plot(student1)
plot(students)
library(googleVis)
gather(students,)
names(students)
test<- gather(students, class,sex,-grade)
test<- gather(students, class,sex,-grade)
library(dplyr)
test<- gather(students, class,sex,-grade)
library(tidyr)
test<- gather(students, class,sex,-grade)
test
test<- gather(students,sex,-grade)
test<- gather(students,class,sex,-grade)
plot(test)
library(googleVis)
?"googleVis"
demo(googleVis)
library(swirl)
swirl()
exists()
play()
install.packages("RMySQL")
library(RMySQL)
ucscDB <- dbConnect()
ucscDB <- dbConnect(MySQL(),user = "genome",host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDB <- dbConnect(MySQL(),user = "genome",host="genome-mysql.cse.ucsc.edu")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
hdf <- h5createFile("example")
library(httr)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "b2851dd0ffd6128c1cf5",
secret = "9309802148990226291af58239c519f4969c6d1a")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(curl)
install.packages("curl")
install.packages("curl")
library(curl)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req$date
req$times
req$headers
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "3ab313538c301fa31716", "233ec0ebcdfb48f0bb0027f5c2ffef4df7876024")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
swirl()
libarary(swirl)
library(swirl)
swirl()
libarary(swirl)
library(swirl)
swirl()
main()
main()
library(swirl)
swirl()
q()
library(swirl)
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran. -time)
select(cran. -time)
select(cran, -time)
select(cran, -(X:size))
select(cran, -X:size)
select(cran, X:size)
select(cran, -X:-size)
select(cran, - X:size)
select(cran, - (X:size)
)
select(cran, -X:size)
-5:20
select(cran, - (X:size))
-(5:20)
select(cran, - (X:size))
filter(cran, package=="swirl")
filter(cran,
| r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version), ip_id)
cran3 <- select(cran,ip_id, package, size)
cran32
cran3
mutate(cran3,siz_mb =size/2^20)
mutate(cran3, size_mb = size/2^20 )
mutate(cran3, size_mb = size/2^20 ,size_gb = size_mb/2^10 )
mutate(cran3,correct_size = size *1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran,avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
?quantile
play()
pack_sum
quantile(pack_sum$count)
quantile(pack_sum$count,prob=.99)
quantile(pack_sum$count,prob=.95)
quantile(pack_sum$count,prob=.75)
quantile(pack_sum$count,prob=.5)
quantile(pack_sum$count,prob=.5)
quantile(pack_sum$count,prob=.99)
quantile(pack_sum$count,prob=.75)
quantile(pack_sum$count,prob=.70)
quantile(pack_sum$count,prob=.7)
quantile(pack_sum$count,prob=.700)
quantile(pack_sum$count,prob=.70)
quantile(pack_sum$count,prob=.75)
quantile(pack_sum$count,prob=.78)
pack_sum$count
sum(pack_sum$count)
count(pack_sum$count)
group_by(pack_sum,count,count)
group_by(pack_sum,count)
summarize(pack_sum,count,count())
summarize(pack_sum,count)
summarize(pack_sum)
pack_sum
summarize?
?
)
?summarize
pack_sum
summarize(pack_sum, count, df = count(package))
summarize(pack_sum, df = count(package))
summarize(pack_sum, df = sum(count))
?count
summarize(pack_sum,package, df = sum(count))
summarize(pack_sum,p=package, df = sum(count))
group_by(pack_sum, count)
select(pack_sum, distinct(count))
select(pack_sum, distinct_(count))
select(pack_sum, count)
select(pack_sum, unique( count))
length(select(pack_sum, unique( count)))
dim(select(pack_sum, unique( count)))
table( select(pack_sum, unique( count)))
plot(table( select(pack_sum, unique( count))))
qqplot(table( select(pack_sum, unique( count))))
swirl()
filter(pack_sum,count > 679)
top_counts <-  filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum,unique > 465)
View(top_unique)
top_unique_sorted <- arrange(pack_sum,desc(unique))
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
student_info
submit()
submit()
submit()
students4
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status ="passed")
failed <- failed %>% mutate(status ="failed")
?bind_rows
bind_rows(passed,failed)
sat
submit()
?separate
submit()
submit()
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
View(test)
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
View(test)
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
view(test)
View(test)
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
View(test)
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
?group_by
?aggregate
test2<- aggregate(x=test,by = c("subject","activity"),FUN=mean)
test2<- aggregate(x=test,by = list("subject","activity"),FUN=mean)
test2<- aggregate(x=test,by = list("subject","activity"),FUN=mean)
test2 <- aggregate(subject + activity ~ .,data=test,mean)
test2 <- aggregate( test$subject + test$activity ~ .,data=test,mean)
test2 <- aggregate(.~ test$subject + test$activity,data=test,mean)
View(test)
View(test2)
test2 <- aggregate(.~ test$subject ,data=test,mean)
test2 <- aggregate(.~ test$subject + test$activity,data=test,mean)
test2 <- aggregate(test$subject + test$activity ~.,data=test,mean)
test2 <- aggregate(test$subject + test$activity ~ .,data=test,mean)
test2 <- dcast(data=test,formula = subject + activity ~ .,fun.aggregate = mean)
test2 <- dcast(data=test,formula = subject + activity ~variable,fun.aggregate = mean)
test2 <- dcast(data=test,formula = subject + activity ~ variable,fun.aggregate = mean)
setkey(test,test$subject,test$activity)
setkey(x=test,test$subject,test$activity)
test <- DT(test)
test <- tbl_df(test)
setkey(x=test,test$subject,test$activity)
test <- data.table(test)
setkey(x=test,test$subject,test$activity)
setkey(x=test,subject,activity)
dtTidy <- test[, list(count = .N, average = mean(value)), by = key(test)]
dtTidy <- test[, list(count = .N, average = mean, by = key(test)]
dtTidy <- test[, list(count = .N, average = mean, by = key(test))]
dataAggr<- aggregate(. ~ subject - activityName, data = test, mean)
dataAggr<- aggregate(. ~ subject - activity, data = test, mean)
View(dataAggr)
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
fin <- run_analysis()
View(fin)
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
fin <- run_analysis()
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
fin <- run_analysis()
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
fin <- run_analysis()
test
test <- read.table(file.path(dataRawDir,"features.txt"),header = F)
test <- read.table(file.path(dataRawDir,"features.txt"),header = F)
dataRawDir <- "data-raw\\UCI HAR Dataset"
test <- read.table(file.path(dataRawDir,"features.txt"),header = F)
grep(x = test$V2, "mean\\(\\)|std\\(\\)",value = T )
paste("avg.",grep(x = test$V2, "mean\\(\\)|std\\(\\)",value = T ),sep = "")
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
test <- run_analysis()
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
View(test)
View(test)
source('C:/Users/aabodabash/projects/wearable_computing_data_cleaning/R/run_analysis.R')
test <- run_analysis()
View(test)
plot(test)
plot(x = test$activity )
